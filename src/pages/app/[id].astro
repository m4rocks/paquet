---
import { AppPageCard } from '@/components/app-sections/app-page-card';
import { AppScreenshotsCarousel } from '@/components/app-sections/app-screenshots-carousel';
import { FeaturesList } from '@/components/app-sections/features';
import { AppListItemSkeleton } from '@/components/skeletons/app-list-item-skeleton';
import { badgeVariants } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import Layout from '@/layouts/layout.astro';
import { categories } from '@/lib/categories';
import type { GetStaticPaths } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import { Links } from '@/components/app-sections/links';
import RandomFromCategory from '@/components/server-islands/random-from-category.astro';
import GithubRelease from '@/components/server-islands/github-release.astro';


export const getStaticPaths: GetStaticPaths = async () => {
	const apps = await getCollection("apps");

	return apps.map((app) => ({
		params: { id: app.id },
		props: { app }
	}))
}

interface Props {
	app: CollectionEntry<"apps">
}

const { app } = Astro.props;
---

<Layout
	title={app.data.name}
	back
	disableTopPadding
	themeColor={app.data.accentColor + "99"}
>
	<div
		style={{
			background: `linear-gradient(to bottom, ${app.data.accentColor + "99"}, var(--color-background))`
		}}
		class="pt-16"
	>
		<div class="container space-y-2 mb-4">
			<AppPageCard
				app={app}
				client:load
			/>
			<h2 class="text-2xl font-bold mt-8">
				About
			</h2>
			<p>
				{app.data.description}
			</p>
			{app.data.categories.map((category) => (
				<a
					class={badgeVariants({ variant: "outline" })}
				>
					{categories.find((c) => c.id === category)?.name}
				</a>
			))}
		</div>
	</div>

	<div class="container my-8">
		{app.data.screenshots?.length ?
			<AppScreenshotsCarousel
				appId={app.id}
				screenshotsLength={app.data.screenshots.length}
				accentColor={app.data.accentColor}
				client:load
			/>
		: null}
	</div>

	<div class="container space-y-8">
		<FeaturesList
			features={app.data.features}
			accentColor={app.data.accentColor}
		/>

		{app.data.githubUrl && app.data.syncGitHubReleases ?
			<GithubRelease
				server:defer
			/>
		: null}

		<Links
			app={app}
		/>

		<Separator/>

		<Card>
			<CardHeader>
				<CardTitle>
					Other apps
				</CardTitle>
			</CardHeader>
			<CardContent className="flex flex-col gap-2">
				<RandomFromCategory server:defer categories={app.data.categories}>
					<div slot="fallback" class="flex flex-col gap-2">
						{Array(5).fill(null).map((_, idx) => (
							<AppListItemSkeleton
								separator={idx !== 4}
							/>
						))}
					</div>
				</Random5Apps>
			</CardContent>
		</Card>
	</div>
</div>
